@page "/register"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using Microsoft.Extensions.Options;
@using Frontend.Data;
@using Frontend.ViewModels;
@using Frontend.Services;
@inject IOptions<BackendDomain> config
@inject IRunnerService runnerService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<Header />
<!-- Main Container -->
<main>
    <div class="justify-content-center align-items-center bg-white">
        <div class="container-fluid">
            <div class="container text-center col-xl-10 col-md-8 col-lg-8 col-xl-8">
                <h1 class="text-center font-weight-normal dark-grey mt-3">Register as a runner</h1>
                <p class="h5 font-weight-normal text-center">
                    Please fill out all of the following information to
                    be registered as a runner.
                </p>
            </div>
            <div class="row d-flex justify-content-center">
                <!-- Buffer column -->
                @*<div class="col-sm-0 col-md-1 col-lg-1 col-xl-2"></div>*@
                @*<div class="col-sm-12 col-md-10 col-lg-10 col-xl-8">*@
                <div class="row">
                    <EditForm Model="runnerView" OnValidSubmit="ValidRegister">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="text-center">
                            <!-- Email -->
                            <div class="form-group input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">Email: </span>
                                </div>
                                <input type="email" @bind-value="runnerView.Email" class="form-control" placeholder="Email address" />
                            </div>
                            <!-- Password -->
                            <div class="form-group input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">Password: </span>
                                </div>
                                <input type="password" @bind-value="runnerView.Password" class="form-control" placeholder="Password" />
                            </div>
                            <!-- Password Again -->
                            <div class="form-group input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">Password Again: </span>
                                </div>
                                <input type="password" @bind-value="runnerView.ConfirmPassword" class="form-control" placeholder="Repeat password" />
                            </div>
                            <!-- First Name -->
                            <div class="form-group input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">First Name: </span>
                                </div>
                                <input type="text" @bind-value="runnerView.FirstName" class="form-control" placeholder="First Name" />
                            </div>
                            <!-- Last Name -->
                            <div class="form-group input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">Last Name: </span>
                                </div>
                                <input type="text" @bind-value="runnerView.LastName" class="form-control" placeholder="Last Name" />
                            </div>

                        </div>
                        <div class="text-center">
                            <!-- Gender -->
                            <div class="form-group input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">Gender: </span>
                                </div>
                                <select class="custom-select form-control"
                                        @bind="runnerView.GenderId">
                                    @if (Genders.Count == 0)
                                    {
                                        <option value="null" disabled>Loading...</option>
                                    }
                                    else
                                    {
                                        foreach (var gender in Genders)
                                        {
                                            <option value="@gender.Gender1">@gender.Gender1</option>
                                        }
                                    }
                                </select>
                            </div>
                            <!-- Date -->
                            <div class="form-group input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">Date of birth: </span>
                                </div>
                                <input placeholder="Selected date" type="date" @bind="runnerView.DateBirth" class="form-control">
                            </div>
                            <!-- Country -->
                            <div class="form-group input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">Country: </span>
                                </div>
                                <select class="custom-select"
                                        @bind="runnerView.CountryId"
                                        searchable="Search here..">
                                    @if (Countries.Count == 0)
                                    {
                                        <option value="null" disabled>Loading...</option>
                                    }
                                    else
                                    {
                                        foreach (var country in Countries)
                                        {
                                            <option value="@country.CountryCode">@country.CountryName</option>
                                        }
                                    }
                                </select>
                            </div>


                        </div>

                        <div class="d-flex justify-content-center">
                            <!-- Buttons field -->
                            <div class="btn-group">
                                <button class="input-group-prepend btn btn-light btn-block text-dark my-1"
                                        type="submit">
                                    Register
                                </button>
                                <a class="btn btn-light btn-block text-dark my-1" href="/">Cancel</a>
                            </div>
                            <!-- /Buttons field -->
                        </div>
                    </EditForm>
                </div>
                <!-- Buffer column -->
                @*<div class="col-sm-0 col-md-1 col-lg-1 col-xl-2"></div>*@
            </div>
        </div>
    </div>
</main>
<!-- /Main Container -->

@code {
    private RegisterRunnerView runnerView;
    private List<Gender> _genders;
    private List<Country> _countries;

    public List<Gender> Genders
    {
        get => _genders;
        set
        {
            _genders = value;
            if (value.Count > 0)
            {
                runnerView.GenderId = value.First().Gender1;
                StateHasChanged();
            }
        }
    }

    public List<Country> Countries
    {
        get => _countries;
        set
        {
            _countries = value;
            if (value.Count > 0)
            {
                runnerView.CountryId = value.First().CountryCode;
                StateHasChanged();
            }
        }
    }

    protected override void OnInitialized()
    {
        runnerView = new RegisterRunnerView();
        runnerView.DateBirth = DateTime.Now;
        Genders = new List<Gender>();
        Countries = new List<Country>();
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {

        Genders = await Http.GetJsonAsync<List<Gender>>($"{config.Value.Domain}/api/Genders/");
        Countries = await Http.GetJsonAsync<List<Country>>($"{config.Value.Domain}/api/Countries/");
        await JSRuntime.InvokeVoidAsync("setTitle", "Register runner");
    }


    private async Task<bool> ValidRegister()
    {
        var registeredRunner = new Runner
        {
            Email = runnerView.Email,
            EmailNavigation = new User
            {
                Email = runnerView.Email,
                RoleId = "R",
                FirstName = runnerView.FirstName,
                LastName = runnerView.LastName,
                Password = runnerView.Password
            },
            DateOfBirth = runnerView.DateBirth,
            Gender = runnerView.GenderId,
            CountryCode = runnerView.CountryId
        };

        var returnedRunner = await runnerService.RegisterRunnerAsync(registeredRunner);

        await sessionStorage.SetItemAsync("email", registeredRunner.Email);
        //await sessionStorage.SetItemAsync("role", registeredRunner.EmailNavigation.RoleId);

        ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(registeredRunner.Email, registeredRunner.EmailNavigation.RoleId);

        NavigationManager.NavigateTo("/registerforevent");

        return await Task.FromResult(true);
    }
}
