@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@using Microsoft.Extensions.Options;
@using Frontend.Data;
@using Frontend.ViewModels
@using Frontend.Pages.Modals
@using Frontend.Services
@inject IRunnerService runnerService

@inject AuthenticationStateProvider StateProvider
@inject IOptions<BackendDomain> config

<div class="container-fluid px-0">
    @*@InvokeAsync(() => CheckUserRegister(userContext))*@
    <Header UrlBack="runnermenu" />
    @if (hasRegister == null)
    {
        <h3>Loading page...</h3>
    }
    else if (hasRegister.Value)
    {
        <h3>You have registration!</h3>
    }
    else
    {
        <!-- Main Container -->
        <main>
            @if (Charities != null && Charities.Count > 0)
            {
                <CharityInfoModal Charity="Charities.Single(x => x.CharityId == int.Parse(ForEventView.CharityId))" />
            }
            <EditForm Model="ForEventView" OnValidSubmit="(() => ValidateData(State))">
                <div class="justify-content-center align-items-center bg-white">
                    <div class="container-fluid">
                        <div class="container text-center col-sm-12 col-md-8 col-lg-8 col-xl-8">
                            <h1 class="text-center font-weight-normal dark-grey mt-3">Register for an event</h1>
                            <p class="h5 font-weight-normal text-center">
                                Please fill out all of the following information to
                                register in the Skills Marathon 2015 beign held in Sao Paulo, Brazil. You will be contacted
                                after
                                you have registred to organize payment and other details.
                            </p>
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                        </div>
                        <div class="row mt-4">
                            <!-- Buffer column -->
                            <div class="col-sm-0 col-md-1 col-lg-1 col-xl-2"></div>

                            <!-- Main block: inputs&buttons -->
                            <div class="col-sm-12 col-md-10 col-lg-10 col-xl-8 row pr-0">

                                <!-- Left column -->
                                <div class="col-sm-12 col-md-6 col-lg-6 col-xl-6">
                                    <p class="h3 mid-grey text-center">Competition events</p>
                                    <!-- Inputs -->
                                    <div class="row">
                                        <div class="col-md-1 col-lg-2 col-xl-1"></div>
                                        <div class="form-group col-md-11 col-lg-10 col-xl-11 my-1">
                                            @if (Events == null || Events.Count == 0)
                                            {
                                                <span>Loading...</span>
                                            }
                                            else
                                            {
                                                foreach (var evnt in Events)
                                                {
                                                    <div class="custom-control custom-checkbox">
                                                        @*<InputCheckbox class="custom-control-input"
                                                            id="@($"evnt-{evnt.EventId}")"
                                                            checked="@(ForEventView.EventData.Contains((evnt.EventId,(int)evnt.Cost)))"/>*@
                                                        <input type="checkbox" class="custom-control-input"
                                                               id="@($"evnt-{evnt.EventId}")"
                                                               checked="@(ForEventView.EventData.Contains((evnt.EventId, (int)evnt.Cost)))"
                                                               @onchange="((e) => ChangeEvent(e, evnt.EventId, (int)evnt.Cost))">
                                                        <label class="custom-control-label" for="@($"evnt-{evnt.EventId}")">
                                                            @evnt.EventName ($@((int)evnt.Cost))
                                                        </label>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                    <p class="h3 mid-grey text-center mt-5">Sponsorship details</p>
                                    <!-- Inputs -->
                                    <div class="row">
                                        <div class="col-md-1 col-lg-2 col-xl-1"></div>
                                        <div class="form-group col-md-11 col-lg-10 col-xl-11 my-1">
                                            <div class="form-group input-group my-1">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text">Charity: </span>
                                                </div>
                                                <select class="custom-select col-md-8 col-lg-8 col-xl-8  my-0"
                                                        @bind="ForEventView.CharityId">
                                                    @if (Charities == null || Charities.Count == 0)
                                                    {
                                                        <span>Loading charities...</span>
                                                    }
                                                    else
                                                    {
                                                        foreach (var charity in Charities)
                                                        {
                                                            <option value="@charity.CharityId">@charity.CharityName</option>
                                                        }
                                                    }
                                                </select>
                                                <!-- Target to raise -->
                                                <div class="form-group input-group my-3">
                                                    <div class="input-group-prepend">
                                                        <span class="input-group-text">Target to raise: </span>
                                                    </div>
                                                    <InputNumber @bind-Value="ForEventView.SponsorTarget" placeholder="$100"
                                                                 class="form-control col-6" />

                                                    <button id="modalActivate" type="button" class="btn btn-sm btn-flat px-1"
                                                            data-toggle="modal" data-target="#exampleModalPreview">
                                                        <i class="fas fa-info-circle"></i>
                                                    </button>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                    <!-- Buttons -->
                                    <div class="row">
                                        <div class="col-sm-0 col-md-0 col-lg-3 col-xl-2"></div>
                                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl-4 mb-2">
                                            <button type="submit"
                                                    class="btn btn-md btn-block btn-light">
                                                Register
                                            </button>
                                        </div>
                                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl-4">
                                            <a href="runnermenu" class="btn btn-md btn-block btn-light">Cancel</a>
                                        </div>
                                        <div class=" col-sm-0 col-md-0 col-lg-1 col-xl-2"></div>
                                    </div>
                                </div>
                                <!-- Right column -->
                                <div class="col-sm-12 col-md-6 col-lg-6 col-xl-6">
                                    <p class="h3 mid-grey pl-5 text-center">Race kit options</p>
                                    <div class="row">
                                        <div class="col-md-1 col-lg-2 col-xl-1"></div>
                                        <div class="form-group col-md-11 col-lg-10 col-xl-11 my-1">
                                            @if (RaceKitOptions == null || RaceKitOptions.Count == 0)
                                            {
                                                <span>Loading race kit options...</span>
                                            }
                                            else
                                            {
                                                foreach (var opt in RaceKitOptions)
                                                {
                                                    <div class="form-check mb-1">
                                                        <input type="radio" class="form-check-input"
                                                               id="@($"opt-{opt.RaceKitOptionId}")" name="radio"
                                                               checked="@(ForEventView.RaceKitOptionId == opt.RaceKitOptionId)"
                                                               @onchange="((e) =>
                                                                              {
                                                                                  ForEventView.RaceKitOptionId = opt.RaceKitOptionId;
                                                                                  CostRaceKitOption = (int)opt.Cost;
                                                                              })">
                                                        <label class="form-check-label" for="@($"opt-{opt.RaceKitOptionId}")">
                                                            <span class="font-weight-bold">Option @opt.RaceKitOptionId ($@((int)opt.Cost)): </span>
                                                            @opt.RaceKitOption1
                                                        </label>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                    <p class="h3 mid-grey pl-5 pt-2 text-center mt-4">Registration cost</p>
                                    <h2 class="display-3 font-weight-bold mid-grey text-center">$@(CostEvents + CostRaceKitOption)</h2>
                                </div>

                            </div>
                            <!-- Buffer column -->
                            <div class="col-sm-0 col-md-1 col-lg-1 col-xl-2"></div>
                        </div>

                    </div>
                </div>
            </EditForm>
        </main>
        <!-- /Main Container -->
    }
</div>

@code {
    [Parameter]
    public AuthenticationState State { get; set; }

    private List<Charity> _charities;
    private List<Charity> Charities
    {
        get => _charities;
        set
        {
            _charities = value;
            if (value.Count > 0)
            {
                ForEventView.CharityId = value.First().CharityId.ToString();
                StateHasChanged();
            }
        }
    }


    private List<RaceKitOption> RaceKitOptions { get; set; }
    private List<Event> Events { get; set; }

    public RegisterForEventView ForEventView { get; set; }
    public int CostEvents { get; set; }
    public int CostRaceKitOption { get; set; }
    private bool? hasRegister;

    protected override void OnInitialized()
    {
        ForEventView = new RegisterForEventView
        {
            EventData = new List<(string, int)>()
        };
        Charities = new List<Charity>();
        RaceKitOptions = new List<RaceKitOption>();
        Events = new List<Event>();

        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        Charities = await Http.GetJsonAsync<List<Charity>>($"{config.Value.Domain}/api/Charities/");
        RaceKitOptions = await Http.GetJsonAsync<List<RaceKitOption>>($"{config.Value.Domain}/api/RaceKitOptions/");
        Events = await Http.GetJsonAsync<List<Event>>($"{config.Value.Domain}/api/Events/actualevents/");

        var runner = await Http.PostJsonAsync<Runner>($"{config.Value.Domain}/api/Runners/email/", State.User.Identity.Name);
        hasRegister = runner.Registration.Count > 0;
    }

    public void ChangeEvent(ChangeEventArgs e, string eventId, int eventCost)
    {
        var val = (bool)e.Value;

        if (val)
            ForEventView.EventData.Add((eventId, eventCost));
        else
            ForEventView.EventData.Remove((eventId, eventCost));

        CostEvents = ForEventView.EventData.Select(x => x.eventCost).Sum();
    }

    public async Task<bool> ValidateData(AuthenticationState context)
    {
        var runner = await Http.PostJsonAsync<Runner>($"{config.Value.Domain}/api/Runners/email/", context.User.Identity.Name);

        var formRegister = new Registration
        {
            RunnerId = runner.RunnerId,
            RegistrationDateTime = DateTime.Now,
            RaceKitOptionId = ForEventView.RaceKitOptionId,
            RegistrationStatusId = 1,
            Cost = CostEvents + CostRaceKitOption,
            CharityId = int.Parse(ForEventView.CharityId),
            SponsorshipTarget = ForEventView.SponsorTarget
        };

        var newRegister = await Http.PostJsonAsync<Registration>($"{config.Value.Domain}/api/Registrations/", formRegister);
        if (newRegister != null)
        {
            foreach (var evntTemp in ForEventView.EventData)
            {
                var lastBibNumber = await Http.PostJsonAsync<short>($"{config.Value.Domain}/api/RegistrationEvents/lastbibnumber/", evntTemp.eventId);
                var formRegisterEvent = new RegistrationEvent
                {
                    RegistrationId = newRegister.RegistrationId,
                    EventId = evntTemp.eventId,
                    BibNumber = (short)(lastBibNumber + 1)
                };
                var newRegisterEvent = await Http.PostJsonAsync<RegistrationEvent>($"{config.Value.Domain}/api/RegistrationEvents/", formRegisterEvent);
                if (newRegisterEvent != null)
                {
                    NavManager.NavigateTo("/registerconfirmation");
                }
            }
        }

        return await Task.FromResult(true);
    }
}
